*nvim-ue5.txt*					For NVIM >= v0.8.0			Last change: 2024 May 25
============================================================================================================================
CONTENTS											*nvim-ue5*

1.	Introduction						|nvim-ue5-introduction|
2.	Project Management					|nvim-ue5-project|
3.	LSP Integration						|nvim-ue5-lsp|
4.	Snippet Generator					|nvim-ue5-snippets|
5.	Requirements						|nvim-ue5-requirements|
6.	Setup							|nvim-ue5-setup|
7.	Commands						|nvim-ue5-commands|
8.	Highlight Groups					|nvim-ue5-highlights|
9.	Links							|nvim-ue5-links|

============================================================================================================================
INTRODUCTION											*nvim-ue5-introduction*

			                      /$$                                           /$$$$$$$
			                     |__/                                          | $$____/
			 /$$$$$$$  /$$    /$$ /$$ /$$$$$$/$$$$          /$$   /$$  /$$$$$$ | $$
			| $$__ $$$|  $$  /$$/| $$| $$_ $$$_ $$$ /$$$$$$| $$  | $$ /$$__  $$| $$$$$$$
			| $$  \ $$ \  $$/$$/ | $$| $$ \ $$ \ $$|______/| $$  | $$| $$$$$$$$|_____  $$
			| $$  | $$  \  $$$/  | $$| $$ | $$ | $$        | $$  | $$| $$_____/ /$$  \ $$
			| $$  | $$   \  $/   | $$| $$ | $$ | $$        |  $$$$$$/|  $$$$$$$|  $$$$$$/
			|__/  |__/    \_/    |__/|__/ |__/ |__/         \______/  \_______/ \______/


Unreal Engine isn't specifically built with neovim in mind, this plugin aims to provide a framework for managing
Unreal Engine 5 projects within neovim.

This support can be broken down into the following parts:
	- Project Management
	- LSP Integration
	- Snippet Generation

The following sections go into more detail.

============================================================================================================================
PROJECT MANAGEMENT										*nvim-ue5-project*

Unreal Engine uses its own program called the Unreal Build Tool (UBT) to manage building its project, and other tasks such
as header and project file generation. This plugin wraps around the UBT to provide the following features:
	- Generating project files
	- Generating project generated header files
	- Building projects
	- Cleaning projects

============================================================================================================================
LSP INTEGRATION											*nvim-ue5-lsp*

Unreal Engine makes heavy use of macros and uses special syntax in its class names. Some lsp such as tree-sitter have 
trouble handling this.

tree-sitter-cpp-ue5 can be used to handle this, but by default .h/.cpp files are recognised
as tree-sitter-cpp. This plugin implements commands to set the filetype of .h/.cpp to cpp_ue5
so that tree-sitter-cpp-ue5 can properly be implemented.

To properly utilise completion services, compile_commands.json needs to be generated, and
.clangd must also be generated. For compile_commands.json to be generated the project must be
generated for vscode. To generate this, build_configuration.xml should be like the following:
>xml
	<? xml version="1.0" encoding="utf-8" ?>
	<Configuration xmlns="https://www.unrealengine.com/BuildConfiguration">
		<ProjectFileGenerator>
			<Format>VisualStudioCode</Format>
		</ProjectFileGenerator>
	</Configuration>
<

When the line that GENERATED_BODY() or any macro like that is on changes, errors will be produced due to the line number
being used in the generated header file associated with the class. This can be fixed by generating the header files again.

============================================================================================================================
SNIPPET GENERATOR										*nvim-ue5-snippets*

Unreal Engine classes and structs require boilerplate headers which can be generated via the editor, but this plugin can 
also handle generation.

The following types can be generated:
	- UClass
	- AActor
	- FStruct
	- UInterface/IInterface

============================================================================================================================
REQUIREMENTS											*nvim-ue5-requirements*

	Neovim Plugins
----------------------------------------------------------------------------------------------------------------------------
	cmp_nvim_lsp
	nvim-lspconfig
	plenary.nvim

	Programs
----------------------------------------------------------------------------------------------------------------------------
	jq

============================================================================================================================
SETUP												*nvim-ue5-setup*

This plugin can be installed via various plugin managers.

Packer
>lua
	use {
		'Xett/nvim-ue5',
		requires = {
			'neovim/nvim-lspconfig',
			'nvim-lua/plenary.nvim'
		}
	}
<

The plugin needs to be initialised in your init.lua as the following:
>lua
	local nvim_ue5 = require('nvim-ue5')
	nvim_ue5.setup({
		unreal_engine_path = "path/to/unreal/engine/source"
	})
<

Inside each project's directory, you need to make a project_config.lua file, where you can
define project specific configurations. The plugin has default settings which can be overriden,
if you wish to just use the defaults settings you can set your project_config.lua to the following:
>lua
	return {}
<

The default settings are as follows:
>lua
	return {
		clean_map = {
			root = {
				mode = "delete_specific",
				whitelist_files = {
					".uproject$",
					"^project_config.lua$",
				},
				files_to_delete = {
					".clangd",
					"compile_commands.json",
				},
			},
			Binaries = {
				mode = "delete_all",
				whitelist_files = {},
				files_to_delete = {},
			},
			Build = {
				mode = "delete_all",
				whitelist_files = {},
				files_to_delete = {},
			},
			DerivedDataCache = {
				mode = "delete_all",
				whitelist_files = {},
				files_to_delete = {},
			},
			Intermediate = {
				mode = "delete_all",
				whitelist_files = {},
				files_to_delete = {},
			},
			Saved = {
				mode = "delete_all",
				whitelist_files = {},
				files_to_delete = {},
			},
			Plugins = {
				default = {
					root = {
						mode = "delete_specific",
						whitelist_files = {
							".uplugin$",
						},
						files_to_delete = {},
					},
					Binaries = {
						mode = "delete_all",
						whitelist_files = {},
						files_to_delete = {},
					},
					Intermediate = {
						mode = "delete_all",
						whitelist_files = {},
						files_to_delete = {},
					},
				},
			},
		},
		clangd = {
			debug_flags = {},
		},
		compile_commands = {
			flags = {
				"-std=c++20",
				"-ferror-limit=0",
				"-Wall",
				"-Wextra",
				"-Wpedantic",
				"-Wshadow-all",
				"-Wno-unused-parameter",
			},
		},
	}
<

============================================================================================================================
COMMANDS											*nvim-ue5-commands*

:UEInfo					This command shows plugin and project specific information.
					Usage:
						UEInfo

	Project Management
----------------------------------------------------------------------------------------------------------------------------

:UEClean				This command removes files from the project, according to the project
					configurations.
					Usage:
						UEClean

:UEGenerateProject			This command generates the project files.
					Usage:
						UEGenerateProject

:UEBuild				This command builds the project using the
					UnrealBuildTool.
					Usage:
						UEBuild [Target] [Target Type] [Platform]

:UEGenerateHeaders			This command generates the header files using the UnrealBuildTool.
					Usage:
						UEGenerateHeaders [Module Name] [Platform] [Target]

	LSP Integration
----------------------------------------------------------------------------------------------------------------------------

:UEGenerateClangd			This command generates a .clangd file
					Usage:
						UEGenerateClangd

:UEGenerateCompileCommands		This command generates a compile_commands.json
					Usage:
						UEGenerateCompileCommands

	Snippets Generator
----------------------------------------------------------------------------------------------------------------------------

Snippet Generator command arguments don't care about order, this is because if you ommit an argument it will resort to its
default.

:UEClass				Generates a UClass header.
					Defaults:
						params:	nil
						parents: UObject
					Usage:
						UEClass params:[Param1],[Param2] parents:[Parent1],[Parent2]

:UEActor				Generates an AActor header.
					Defaults:
						params: nil
						parents: AActor
					Usage:
						UEActor params:[Param1],[Param2] parents:[Parent1],[Parent2]

:UEStruct				Generates a FStruct header.
					Defaults:
						params: nil
						parents: nil
					Usage:
						UEStruct params:[Param1],[Param2] parents:[Parent1],[Parent2]

:UEInterface				Generates a UInterface header, and an IInterface header.
					Defaults:
						params: nil
						uparents: UInterface
						iparents: nil
					Usage:
						UEInterface params:[Param1],[Param2] uparents:[Parent1],[Parent2] iparents:[Parent1],[Parent2]

============================================================================================================================
HIGHLIGHT GROUPS										*nvim-ue5-highlights*

	nvim-ue5
----------------------------------------------------------------------------------------------------------------------------
	UE5Success
	UE5Fail
	UE5Path
	UE5ModuleName
	UE5Seconds
	UE5CleaningModeAll
	UE5CleaningModeSpecific
	UE5Brackets

	tree-sitter-cpp-ue5
----------------------------------------------------------------------------------------------------------------------------
	@ue.name.uobject
	@ue.name.aactor
	@ue.name.fstruct
	@ue.name.ttemplate
	@ue.name.iinterface
	@ue.name.eenum
	@ue.item.eenum
	@ue.safety.type
	@ue.text.type
	@ue.specifier.type
	@ue.field.declaration.type
	@ue.generated.type
	@ue.delegate.type
	@ue.parameter.identifier
	@ue.gameplay.tag
	@ue.gameplay.tag.type
	@ue.log.call
	@ue.namespace

============================================================================================================================
LINKS												*nvim-ue5-links*

1. tree-sitter-cpp-ue5	https://github.com/Xett/tree-sitter-cpp-ue5
